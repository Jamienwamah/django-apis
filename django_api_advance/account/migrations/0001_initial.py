# Generated by Django 5.0.1 on 2024-02-06 07:39

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AccountUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('aes_key', models.CharField(max_length=32)),
                ('jwt_secret_key', models.CharField(default='', max_length=64)),
                ('account_date', models.DateField(default=None, null=True, verbose_name='Account Date')),
                ('account_name', models.CharField(blank=True, max_length=255, null=True)),
                ('account_number', models.CharField(blank=True, max_length=255, null=True)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('bank_name', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('bvn', models.CharField(blank=True, max_length=255, unique=True)),
                ('card_cvv', models.CharField(blank=True, max_length=6)),
                ('card_digit', models.PositiveIntegerField(default=None)),
                ('card_expiry_date', models.DateField(default=None, null=True, verbose_name='Card_Expiry Date')),
                ('card_holder_name', models.CharField(blank=True, max_length=255, unique=True)),
                ('date_of_birth', models.DateField(default=None, null=True, verbose_name='Date of Birth')),
                ('dva_creation_date', models.DateField(default=None, null=True, verbose_name='Dva_Creation Date')),
                ('dva_name', models.CharField(blank=True, max_length=255, null=True)),
                ('dva_number', models.CharField(blank=True, max_length=255, null=True)),
                ('dva_username', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('verification_code', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('finance_health', models.CharField(default=None, max_length=1)),
                ('first_name', models.CharField(max_length=30)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female')], max_length=10, null=True)),
                ('residential_address', models.TextField(blank=True, verbose_name='Residential Address')),
                ('has_dva', models.CharField(blank=True, choices=[('true', 'True'), ('false', 'False')], max_length=10, null=True)),
                ('has_rent', models.CharField(blank=True, choices=[('true', 'True'), ('false', 'False')], max_length=10, null=True)),
                ('has_verified_email', models.CharField(blank=True, choices=[('true', 'True'), ('false', 'False')], max_length=10, null=True)),
                ('has_verified_kyc', models.CharField(blank=True, choices=[('true', 'True'), ('false', 'False')], max_length=10, null=True)),
                ('has_verified_phone', models.CharField(blank=True, choices=[('true', 'True'), ('false', 'False')], max_length=10, null=True)),
                ('phone_number', models.CharField(max_length=15, unique=True, validators=[django.core.validators.RegexValidator(message='Phone number must be entered in the format: +234XXXXXXXXXX.', regex='^\\+?234?\\d{10}$')], verbose_name='Phone Number')),
                ('user_id', models.CharField(blank=True, max_length=255, null=True)),
                ('id_card', models.ImageField(blank=True, null=True, upload_to='id_cards/')),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='profile_images/')),
                ('kyc_details', models.TextField(blank=True, null=True)),
                ('lastname', models.CharField(blank=True, max_length=30, null=True)),
                ('loan_amount', models.PositiveIntegerField(default=None)),
                ('password', models.CharField(max_length=128)),
                ('referral_code', models.CharField(blank=True, max_length=255, null=True)),
                ('referrals', models.PositiveIntegerField(default=None)),
                ('rentspace_id', models.CharField(blank=True, max_length=255, null=True)),
                ('status', models.CharField(blank=True, choices=[('verified', 'Verified'), ('unverified', 'Unverified'), ('suspended', 'Suspended'), ('locked', 'Locked')], max_length=10, null=True)),
                ('total_assets', models.PositiveIntegerField(default=None)),
                ('total_debts', models.PositiveIntegerField(default=None)),
                ('total_savings', models.PositiveIntegerField(default=None)),
                ('space_points', models.PositiveIntegerField(default=None)),
                ('wallet_balance', models.PositiveIntegerField(default=None)),
                ('wallet_id', models.CharField(blank=True, max_length=255, null=True)),
                ('transaction_pin', models.CharField(max_length=6, unique=True)),
                ('utility_points', models.PositiveIntegerField(default=0)),
                ('wallet_address', models.CharField(default=None, max_length=255)),
                ('groups', models.ManyToManyField(blank=True, related_name='user_account_accountuser_groups', to='auth.group')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
